############################
# Base build image with deps
############################
FROM rust:1.86-slim-bookworm AS chef-base

# Install required dependencies for eBPF and development
RUN apt-get update && apt-get install -y \
    clang-19 \
    libelf-dev \
    make \
    pkg-config \
    && ln -s /usr/bin/clang-19 /usr/bin/clang \
    && rustup component add rustfmt \
    && rm -rf /var/lib/apt/lists/*

# Install cargo-chef
RUN cargo install cargo-chef --locked

WORKDIR /app

############################
# Planner stage (cargo-chef)
############################
FROM chef-base AS chef

# Copy the project files needed to compute dependency graph
# Copying the whole workspace ensures build.rs and included files are considered
COPY . .

# Prepare the recipe for caching dependencies
RUN cargo chef prepare --recipe-path recipe.json

############################
# Builder stage
############################
FROM chef-base AS builder

# Copy over the recipe from the planner stage and build dependencies only
COPY --from=chef /app/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# Now copy the actual source code
COPY . .

# Build the actual application
RUN cargo build --release --bin collector

# Stage 2: Create a lightweight runtime image
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    libelf1 \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && addgroup --system collector \
    && adduser --system --ingroup collector collector

# Copy the built binary
COPY --from=builder /app/target/release/collector /usr/local/bin/

USER collector:collector
ENTRYPOINT ["/usr/local/bin/collector"] 
