default:
  replicas: 4 # multiple replicas for most services

opentelemetry-collector:
  enabled: true
  # Mount volume for internal metrics export
  extraVolumes:
    - name: internal-metrics
      emptyDir: {}
  extraVolumeMounts:
    - name: internal-metrics
      mountPath: /tmp/internal-metrics
  config:
    service:
      telemetry:
        metrics:
          level: detailed
          readers:
            - periodic:
                interval: 10000
                timeout: 5000
                exporter:
                  file:
                    path: /tmp/internal-metrics/otel-collector-internal-metrics.jsonl
                    format: json

opensearch:
  enabled: false

jaeger:
  enabled: false

prometheus:
  enabled: false

grafana:
  enabled: false

components:
  flagd:
    replicas: 3 # otherwise, flagd only runs on one replica, and will bottleneck some services


  accounting:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable
    resources:
      limits:
        memory: 200Mi

  ad:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable

  cart:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable
    resources:
      limits:
        memory: 650Mi

  checkout:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable
    resources:
      limits:
        memory: 650Mi

  currency:
    # useDefault:
    #   env: true
    # envOverrides:
    #   - name: OTEL_EXPORTER_OTLP_ENDPOINT
    #     value: "" # Disable
    replicas: 15
    resources:
      limits:
        memory: 600Mi

  email:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable
    replicas: 10
    resources:
      limits:
        memory: 600Mi

  fraud-detection:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable

  frontend:
    replicas: 30
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable
    resources:
      limits:
        memory: 500Mi

  frontend-proxy:
    useDefault:
      env: false
    replicas: 8
    resources:
      limits:
        memory: 650Mi

  image-provider:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable
      - name: OTEL_SERVICE_NAME
        value: "localhost:4318" # Disable
      - name: OTEL_COLLECTOR_HOST
        value: "" # Disable

  payment:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable

  product-catalog:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable
    resources:
      limits:
        memory: 650Mi
    
  quote:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable

  recommendation:
    useDefault:
      env: false
    envOverrides:
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable
      - name: OTEL_SERVICE_NAME
        value: "" # Disable

  shipping:
    resources:
      limits:
        memory: 200Mi

  valkey-cart:
    resources:
      limits:
        memory: 200Mi

  load-generator:
    enabled: false
    replicas: 1 # only one replica for load-generator, it spawns multiple processes
    resources:
      limits:
        memory: 5000Mi
    useDefault:
      env: false
    envOverrides:
      - name: LOCUST_CSV
        value: "/tmp/locust_results/stats"
      - name: LOCUST_CSV_FULL_HISTORY
        value: "true"
      - name: LOCUST_HEADLESS
        value: "true"
      - name: LOCUST_USERS
        value: "33000"
      - name: LOCUST_SPAWN_RATE
        value: "165"
      - name: LOCUST_BROWSER_TRAFFIC_ENABLED
        value: "false"
      - name: LOCUST_PROCESSES
        value: "48"
      - name: LOCUST_LOCUSTFILE
        value: "/etc/locust/locustfile.py"
      - name: OTEL_EXPORTER_OTLP_ENDPOINT
        value: "" # Disable
      
    # Create a volume mount for the CSV files
    mountedEmptyDirs:
      - name: locust-results
        mountPath: /tmp/locust_results 

    # Mount the custom locustfile.py
    mountedConfigMaps:
      - name: locustfile
        mountPath: /etc/locust
        data:
          locustfile.py: |
            #!/usr/bin/python

            # Copyright The OpenTelemetry Authors
            # SPDX-License-Identifier: Apache-2.0

            import json
            import os
            import random
            import uuid
            import logging

            from locust import FastHttpUser, task, between
            from locust_plugins.users.playwright import PlaywrightUser, pw, PageWithRetry, event

            from opentelemetry import context, baggage, trace
            from opentelemetry.metrics import set_meter_provider
            from opentelemetry.sdk.metrics import MeterProvider
            from opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader
            from opentelemetry.sdk.trace import TracerProvider
            from opentelemetry.sdk.trace.export import BatchSpanProcessor
            from opentelemetry.exporter.otlp.proto.grpc.metric_exporter import OTLPMetricExporter
            from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
            from opentelemetry.instrumentation.jinja2 import Jinja2Instrumentor
            from opentelemetry.instrumentation.requests import RequestsInstrumentor
            from opentelemetry.instrumentation.system_metrics import SystemMetricsInstrumentor
            from opentelemetry.instrumentation.urllib3 import URLLib3Instrumentor
            from opentelemetry._logs import set_logger_provider
            from opentelemetry.exporter.otlp.proto.grpc._log_exporter import (
                OTLPLogExporter,
            )
            from opentelemetry.sdk._logs import LoggerProvider, LoggingHandler
            from opentelemetry.sdk._logs.export import BatchLogRecordProcessor
            from opentelemetry.sdk.resources import Resource

            from openfeature import api
            from openfeature.contrib.provider.ofrep import OFREPProvider
            from openfeature.contrib.hook.opentelemetry import TracingHook

            from playwright.async_api import Route, Request

            logger_provider = LoggerProvider(resource=Resource.create(
                    {
                        "service.name": "load-generator",
                    }
                ),)
            set_logger_provider(logger_provider)

            exporter = OTLPLogExporter(insecure=True)
            logger_provider.add_log_record_processor(BatchLogRecordProcessor(exporter))
            handler = LoggingHandler(level=logging.INFO, logger_provider=logger_provider)

            # Attach OTLP handler to locust logger
            logging.getLogger().addHandler(handler)
            logging.getLogger().setLevel(logging.INFO)

            exporter = OTLPMetricExporter(insecure=True)
            set_meter_provider(MeterProvider([PeriodicExportingMetricReader(exporter)]))

            tracer_provider = TracerProvider()
            trace.set_tracer_provider(tracer_provider)
            tracer_provider.add_span_processor(BatchSpanProcessor(OTLPSpanExporter()))

            # Instrumenting manually to avoid error with locust gevent monkey
            Jinja2Instrumentor().instrument()
            RequestsInstrumentor().instrument()
            SystemMetricsInstrumentor().instrument()
            URLLib3Instrumentor().instrument()
            logging.info("Instrumentation complete")

            # Initialize Flagd provider
            base_url = f"http://{os.environ.get('FLAGD_HOST', 'localhost')}:{os.environ.get('FLAGD_OFREP_PORT', 8016)}"
            api.set_provider(OFREPProvider(base_url=base_url))
            api.add_hooks([TracingHook()])

            def get_flagd_value(FlagName):
                # Initialize OpenFeature
                client = api.get_client()
                return client.get_integer_value(FlagName, 0)

            categories = [
                "binoculars",
                "telescopes",
                "accessories",
                "assembly",
                "travel",
                "books",
                None,
            ]

            products = [
                "0PUK6V6EV0",
                "1YMWWN1N4O",
                "2ZYFJ3GM2N",
                "66VCHSJNUP",
                "6E92ZMYYFZ",
                "9SIQT8TOJO",
                "L9ECAV7KIM",
                "LS4PSXUNUM",
                "OLJCESPC7Z",
                "HQTGWGPNH4",
            ]

            people_file = open('people.json')
            people = json.load(people_file)

            class WebsiteUser(FastHttpUser):
                wait_time = between(1, 10)

                @task(1)
                def index(self):
                    self.client.get("/")

                @task(10)
                def browse_product(self):
                    self.client.get("/api/products/" + random.choice(products), name="/api/products/[id]")

                @task(3)
                def get_recommendations(self):
                    params = {
                        "productIds": [random.choice(products)],
                    }
                    self.client.get("/api/recommendations", params=params)

                @task(3)
                def get_ads(self):
                    params = {
                        "contextKeys": [random.choice(categories)],
                    }
                    self.client.get("/api/data/", params=params)

                @task(3)
                def view_cart(self):
                    self.client.get("/api/cart")

                @task(2)
                def add_to_cart(self, user=""):
                    if user == "":
                        user = str(uuid.uuid1())
                    product = random.choice(products)
                    self.client.get("/api/products/" + product)
                    cart_item = {
                        "item": {
                            "productId": product,
                            "quantity": random.choice([1, 2, 3, 4, 5, 10]),
                        },
                        "userId": user,
                    }
                    self.client.post("/api/cart", json=cart_item)

                @task(1)
                def checkout(self):
                    # checkout call with an item added to cart
                    user = str(uuid.uuid1())
                    self.add_to_cart(user=user)
                    checkout_person = random.choice(people)
                    checkout_person["userId"] = user
                    self.client.post("/api/checkout", json=checkout_person)

                @task(1)
                def checkout_multi(self):
                    # checkout call which adds 2-4 different items to cart before checkout
                    user = str(uuid.uuid1())
                    for i in range(random.choice([2, 3, 4])):
                        self.add_to_cart(user=user)
                    checkout_person = random.choice(people)
                    checkout_person["userId"] = user
                    self.client.post("/api/checkout", json=checkout_person)

                @task(5)
                def flood_home(self):
                    for _ in range(0, get_flagd_value("loadGeneratorFloodHomepage")):
                        self.client.get("/")

                def on_start(self):
                    ctx = baggage.set_baggage("session.id", str(uuid.uuid4()))
                    ctx = baggage.set_baggage("synthetic_request", "true", context=ctx)
                    context.attach(ctx)
                    # self.index()


            browser_traffic_enabled = os.environ.get("LOCUST_BROWSER_TRAFFIC_ENABLED", "").lower() in ("true", "yes", "on")

            if browser_traffic_enabled:
                class WebsiteBrowserUser(PlaywrightUser):
                    headless = True  # to use a headless browser, without a GUI

                    @task
                    @pw
                    async def open_cart_page_and_change_currency(self, page: PageWithRetry):
                        try:
                            page.on("console", lambda msg: print(msg.text))
                            await page.route('**/*', add_baggage_header)
                            await page.goto("/cart", wait_until="domcontentloaded")
                            await page.select_option('[name="currency_code"]', 'CHF')
                            await page.wait_for_timeout(2000)  # giving the browser time to export the traces
                        except:
                            pass

                    @task
                    @pw
                    async def add_product_to_cart(self, page: PageWithRetry):
                        try:
                            page.on("console", lambda msg: print(msg.text))
                            await page.route('**/*', add_baggage_header)
                            await page.goto("/", wait_until="domcontentloaded")
                            await page.click('p:has-text("Roof Binoculars")', wait_until="domcontentloaded")
                            await page.click('button:has-text("Add To Cart")', wait_until="domcontentloaded")
                            await page.wait_for_timeout(2000)  # giving the browser time to export the traces
                        except:
                            pass


            async def add_baggage_header(route: Route, request: Request):
                existing_baggage = request.headers.get('baggage', '')
                headers = {
                    **request.headers,
                    'baggage': ', '.join(filter(None, (existing_baggage, 'synthetic_request=true')))
                }
                await route.continue_(headers=headers) 
