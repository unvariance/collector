name: Test NRI Init Container

on:
  push:
    branches: [ main ]
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - 'charts/collector/templates/**'
      - 'charts/collector/values.yaml'
      - '.github/workflows/test-nri-init.yaml'
  pull_request:
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - 'charts/collector/templates/**'
      - 'charts/collector/values.yaml'
      - '.github/workflows/test-nri-init.yaml'
  workflow_dispatch:

jobs:
  validate-script:
    name: Validate NRI Init Script
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Check script syntax
        run: |
          bash -n charts/collector/scripts/nri-init.sh
          echo "✓ Script syntax is valid"
      
      - name: Run shellcheck
        uses: ludeeus/action-shellcheck@master
        with:
          scandir: './charts/collector/scripts'
          severity: warning
      
      - name: Check script permissions
        run: |
          ls -la charts/collector/scripts/nri-init.sh
          if [[ -x charts/collector/scripts/nri-init.sh ]]; then
            echo "✓ Script is executable"
          else
            echo "✗ Script is not executable"
            exit 1
          fi

  build-init-container:
    name: Build NRI Init Container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test container can run script
        run: |
          # Create a test script locally
          mkdir -p test-scripts
          cp charts/collector/scripts/nri-init.sh test-scripts/
          
          # Run container with script mounted
          docker run --rm \
            -v $(pwd)/test-scripts:/scripts:ro \
            -e NRI_CONFIGURE=false \
            -e NRI_RESTART=false \
            --entrypoint /bin/sh \
            alpine:3.19 \
            -c "ls -la /scripts && /scripts/nri-init.sh || true"

  test-nri-detection:
    name: Test NRI Detection Logic
    runs-on: ubuntu-latest
    strategy:
      matrix:
        scenario:
          - name: "NRI Socket Exists"  
            setup: |
              sudo mkdir -p /var/run/nri
              # Create a unix socket instead of a regular file
              sudo python3 -c "import socket; s = socket.socket(socket.AF_UNIX); s.bind('/var/run/nri/nri.sock')"
            expected: "NRI socket found"
          - name: "NRI Socket Missing"
            setup: |
              sudo rm -rf /var/run/nri
            expected: "NRI socket not found"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup test environment
        run: ${{ matrix.scenario.setup }}
      
      - name: Run NRI detection test
        run: |
          export NRI_CONFIGURE=false
          export NRI_RESTART=false
          
          # Run script and capture output
          output=$(sudo bash charts/collector/scripts/nri-init.sh 2>&1 || true)
          echo "$output"
          
          # Check for expected output
          if echo "$output" | grep -q "${{ matrix.scenario.expected }}"; then
            echo "✓ Test passed: Found expected output '${{ matrix.scenario.expected }}'"
          else
            echo "✗ Test failed: Expected output '${{ matrix.scenario.expected }}' not found"
            exit 1
          fi

  test-containerd-config:
    name: Test Containerd Configuration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        containerd_version: ["1.7.20", "1.6.33"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install containerd ${{ matrix.containerd_version }}
        run: |
          # Download and install specific containerd version
          wget https://github.com/containerd/containerd/releases/download/v${{ matrix.containerd_version }}/containerd-${{ matrix.containerd_version }}-linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf containerd-${{ matrix.containerd_version }}-linux-amd64.tar.gz
          
          # Create minimal containerd config
          sudo mkdir -p /etc/containerd
          sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
      
      - name: Test NRI configuration update
        run: |
          export NRI_CONFIGURE=true
          export NRI_RESTART=false
          
          # Run configuration script
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Verify NRI configuration was added
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml; then
            echo "✓ NRI configuration added to containerd config"
            sudo grep -A 5 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml
          else
            echo "✗ NRI configuration not found in containerd config"
            exit 1
          fi
          
          # Verify NRI is set to enabled
          if sudo grep -q 'disable = false' /etc/containerd/config.toml; then
            echo "✓ NRI is set to enabled"
          else
            echo "✗ NRI is not enabled"
            exit 1
          fi

  test-k3s-config:
    name: Test K3s Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create K3s-like environment
        run: |
          # Create K3s directory structure
          sudo mkdir -p /var/lib/rancher/k3s/agent/etc/containerd
          
          # Create a minimal K3s containerd template
          sudo tee /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl > /dev/null <<'EOF'
          version = 2
          
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          
          [plugins."io.containerd.grpc.v1.cri".containerd]
            snapshotter = "overlayfs"
          
          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
            runtime_type = "io.containerd.runc.v2"
          EOF
      
      - name: Test K3s NRI configuration
        run: |
          export NRI_CONFIGURE=true
          export NRI_RESTART=false
          
          # Run configuration script
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Verify NRI configuration was added to K3s template
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl; then
            echo "✓ NRI configuration added to K3s template"
            sudo grep -A 5 'plugins."io.containerd.nri.v1.nri"' /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl
          else
            echo "✗ NRI configuration not found in K3s template"
            exit 1
          fi

  test-idempotency:
    name: Test Script Idempotency
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup containerd config
        run: |
          sudo mkdir -p /etc/containerd
          sudo tee /etc/containerd/config.toml > /dev/null <<'EOF'
          version = 2
          
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          EOF
      
      - name: Run script multiple times
        run: |
          export NRI_CONFIGURE=true
          export NRI_RESTART=false
          
          # Run script first time
          echo "=== First run ==="
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Capture config after first run
          sudo cp /etc/containerd/config.toml /tmp/config1.toml
          
          # Run script second time
          echo "=== Second run ==="
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Capture config after second run
          sudo cp /etc/containerd/config.toml /tmp/config2.toml
          
          # Compare configs - should be identical
          if diff /tmp/config1.toml /tmp/config2.toml; then
            echo "✓ Script is idempotent - config unchanged on second run"
          else
            echo "✗ Script is not idempotent - config changed on second run"
            exit 1
          fi
          
          # Verify NRI is still configured correctly
          if sudo grep -q 'disable = false' /etc/containerd/config.toml; then
            echo "✓ NRI still enabled after multiple runs"
          else
            echo "✗ NRI configuration corrupted"
            exit 1
          fi

  test-containerd-restart:
    name: Test Containerd Restart with Configuration
    runs-on: ubuntu-latest
    strategy:
      matrix:
        containerd_version: ["1.7.20", "1.6.33"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install containerd ${{ matrix.containerd_version }}
        run: |
          # Download and install specific containerd version
          wget https://github.com/containerd/containerd/releases/download/v${{ matrix.containerd_version }}/containerd-${{ matrix.containerd_version }}-linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf containerd-${{ matrix.containerd_version }}-linux-amd64.tar.gz
          
          # Create systemd service file for containerd
          sudo tee /etc/systemd/system/containerd.service > /dev/null <<'EOF'
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target local-fs.target
          
          [Service]
          ExecStartPre=-/sbin/modprobe overlay
          ExecStart=/usr/local/bin/containerd
          Type=notify
          Delegate=yes
          KillMode=process
          Restart=always
          RestartSec=5
          LimitNOFILE=1048576
          LimitNPROC=infinity
          LimitCORE=infinity
          TasksMax=infinity
          OOMScoreAdjust=-999
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Create minimal containerd config
          sudo mkdir -p /etc/containerd
          sudo containerd config default | sudo tee /etc/containerd/config.toml > /dev/null
          
          # Start containerd
          sudo systemctl daemon-reload
          sudo systemctl start containerd
          sudo systemctl status containerd || true
      
      - name: Test NRI configuration with restart
        run: |
          # Verify containerd is running
          if ! sudo systemctl is-active containerd; then
            echo "✗ Containerd is not running"
            exit 1
          fi
          echo "✓ Containerd is running"
          
          # Verify NRI socket doesn't exist initially
          if sudo test -S /var/run/nri/nri.sock; then
            echo "✗ NRI socket already exists (unexpected)"
            exit 1
          fi
          echo "✓ NRI socket not present initially"
          
          # Configure host mount for nsenter
          sudo mkdir -p /host/proc
          sudo mount --bind /proc /host/proc
          
          export NRI_CONFIGURE=true
          export NRI_RESTART=true
          
          # Run configuration and restart script
          echo "=== Running NRI init script with restart ==="
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Give containerd time to restart
          sleep 5
          
          # Verify containerd is still running after restart
          if sudo systemctl is-active containerd; then
            echo "✓ Containerd is running after restart"
          else
            echo "✗ Containerd failed to restart properly"
            exit 1
          fi
          
          # Verify NRI configuration was added
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml; then
            echo "✓ NRI configuration found in containerd config"
            sudo grep -A 5 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml
          else
            echo "✗ NRI configuration not found in containerd config"
            exit 1
          fi
          
          # Verify NRI is enabled
          if sudo grep -q 'disable = false' /etc/containerd/config.toml; then
            echo "✓ NRI is set to enabled in config"
          else
            echo "✗ NRI is not enabled in config"
            exit 1
          fi

          # Create NRI socket directory and verify socket appears
          sudo mkdir -p /var/run/nri

          # Restart containerd one more time to apply config
          sudo systemctl restart containerd
          # Wait a bit for NRI socket to be created (containerd >= 1.7)
          for i in {1..30}; do
            if sudo test -S /var/run/nri/nri.sock; then
              echo "✓ NRI socket present after restart"
              break
            fi
            sleep 1
          done
          if ! sudo test -S /var/run/nri/nri.sock; then
            echo "✗ NRI socket not found after restart"
            exit 1
          fi
          
          # Verify that running the script again with restart still works
          echo "=== Running NRI init script again with restart (should be idempotent) ==="
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Verify containerd is still running
          if sudo systemctl is-active containerd; then
            echo "✓ Containerd is running after second restart"
          else
            echo "✗ Containerd failed after second restart"
            exit 1
          fi

  test-k3s-restart:
    name: Test K3s Restart with Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install K3s
        run: |
          # Install K3s
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="v1.30.6+k3s1" sh -
          
          # Wait for K3s to be ready
          sudo k3s kubectl wait --for=condition=Ready node --all --timeout=60s || true
          
          # Verify K3s is running
          sudo systemctl status k3s || true
      
      - name: Test NRI configuration with K3s restart
        run: |
          # Verify K3s is running
          if ! sudo systemctl is-active k3s; then
            echo "✗ K3s is not running"
            exit 1
          fi
          echo "✓ K3s is running"
          
          # Check initial K3s template state (v2 and v3)
          echo "=== Initial K3s template state ==="
          TEMPLATE_DIR="/var/lib/rancher/k3s/agent/etc/containerd"
          if [ -f "$TEMPLATE_DIR/config-v3.toml.tmpl" ]; then
            echo "config-v3.toml.tmpl exists:"
            sudo head -n 50 "$TEMPLATE_DIR/config-v3.toml.tmpl" || true
          elif [ -f "$TEMPLATE_DIR/config.toml.tmpl" ]; then
            echo "config.toml.tmpl exists:"
            sudo head -n 50 "$TEMPLATE_DIR/config.toml.tmpl" || true
          else
            echo "No K3s containerd template exists yet in $TEMPLATE_DIR"
            sudo ls -la "$TEMPLATE_DIR" || true
          fi
          
          # Configure host mount for nsenter
          sudo mkdir -p /host/proc
          sudo mount --bind /proc /host/proc
          
          export NRI_CONFIGURE=true
          export NRI_RESTART=true
          
          # Run configuration and restart script
          echo "=== Running NRI init script with restart for K3s ==="
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Give K3s time to restart
          sleep 10
          
          # Verify K3s is still running after restart attempt
          if sudo systemctl is-active k3s; then
            echo "✓ K3s is running after restart attempt"
          else
            echo "✗ K3s failed to restart properly"
            # Try to get more information
            sudo systemctl status k3s || true
            sudo journalctl -u k3s --no-pager -n 50 || true
            exit 1
          fi
          
          # Verify NRI configuration was added to K3s template (prefer v3, fallback v2)
          template_dir="/var/lib/rancher/k3s/agent/etc/containerd"
          echo "Looking for K3s templates under $template_dir ..."
          sudo ls -la "$template_dir" || true
          if sudo test -f "$template_dir/config-v3.toml.tmpl"; then
            template_file="$template_dir/config-v3.toml.tmpl"
          elif sudo test -f "$template_dir/config.toml.tmpl"; then
            template_file="$template_dir/config.toml.tmpl"
          else
            echo "✗ K3s template file not found at either $template_dir/config-v3.toml.tmpl or $template_dir/config.toml.tmpl"
            # Extra diagnostics
            echo "Contents of $template_dir:" && sudo ls -la "$template_dir" || true
            exit 1
          fi
          if sudo test -f "$template_file"; then
            if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' "$template_file"; then
              echo "✓ NRI configuration found in K3s template"
              sudo grep -A 5 'plugins."io.containerd.nri.v1.nri"' "$template_file"
            else
              echo "✗ NRI configuration not found in K3s template"
              echo "Template contents:"
              sudo cat "$template_file"
              exit 1
            fi
            
            # Verify NRI is enabled
            if sudo grep -q 'disable = false' "$template_file"; then
              echo "✓ NRI is set to enabled in K3s template"
            else
              echo "✗ NRI is not enabled in K3s template"
              exit 1
            fi
          fi
          
          # Verify that running the script again with restart still works (idempotency)
          echo "=== Running NRI init script again with restart (should be idempotent) ==="
          sudo -E bash charts/collector/scripts/nri-init.sh || true

          # Verify K3s is still running
          if sudo systemctl is-active k3s; then
            echo "✓ K3s is running after second restart attempt"
          else
            echo "✗ K3s failed after second restart attempt"
            exit 1
          fi

          # Verify NRI socket after K3s restart (required)
          for i in {1..30}; do
            if sudo test -S /var/run/nri/nri.sock; then
              echo "✓ NRI socket present after K3s restart"
              break
            fi
            sleep 1
          done
          if ! sudo test -S /var/run/nri/nri.sock; then
            echo "✗ NRI socket not found after K3s restart"
            sudo ls -la /var/run/nri || true
            sudo journalctl -u k3s --no-pager -n 50 || true
            exit 1
          fi
          
          # Check if actual containerd config was updated (K3s generates this from template)
          k3s_containerd_config="/var/lib/rancher/k3s/agent/etc/containerd/config.toml"
          if [ -f "$k3s_containerd_config" ]; then
            echo "=== Checking generated K3s containerd config ==="
            if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' "$k3s_containerd_config"; then
              echo "✓ NRI configuration found in generated K3s containerd config"
              sudo grep -A 5 'plugins."io.containerd.nri.v1.nri"' "$k3s_containerd_config"
            else
              echo "ℹ NRI configuration not in generated config (may require full K3s restart)"
            fi
          fi

  test-config-effectiveness:
    name: Test Configuration Effectiveness After Restart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install containerd
        run: |
          # Install latest stable containerd
          wget https://github.com/containerd/containerd/releases/download/v1.7.20/containerd-1.7.20-linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf containerd-1.7.20-linux-amd64.tar.gz
          
          # Create systemd service file
          sudo tee /etc/systemd/system/containerd.service > /dev/null <<'EOF'
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target local-fs.target
          
          [Service]
          ExecStartPre=-/sbin/modprobe overlay
          ExecStart=/usr/local/bin/containerd
          Type=notify
          Delegate=yes
          KillMode=process
          Restart=always
          RestartSec=5
          LimitNOFILE=1048576
          LimitNPROC=infinity
          LimitCORE=infinity
          TasksMax=infinity
          OOMScoreAdjust=-999
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Create initial config WITHOUT NRI
          sudo mkdir -p /etc/containerd
          sudo tee /etc/containerd/config.toml > /dev/null <<'EOF'
          version = 2
          
          [plugins."io.containerd.grpc.v1.cri"]
            enable_selinux = false
          EOF
          
          # Start containerd
          sudo systemctl daemon-reload
          sudo systemctl start containerd
          sudo systemctl status containerd || true
      
      - name: Test configuration changes become effective
        run: |
          # Step 1: Verify initial state (NRI disabled)
          echo "=== Step 1: Verify initial state ==="
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml; then
            echo "✗ NRI configuration already present (unexpected)"
            exit 1
          fi
          echo "✓ NRI configuration not present initially"
          
          # Step 2: Apply configuration WITHOUT restart
          echo "=== Step 2: Apply configuration without restart ==="
          export NRI_CONFIGURE=true
          export NRI_RESTART=false
          
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Verify config was updated
          if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml; then
            echo "✓ NRI configuration added to config file"
          else
            echo "✗ NRI configuration not added"
            exit 1
          fi
          
          # Check that NRI is not yet effective (no socket)
          if sudo test -S /var/run/nri/nri.sock; then
            echo "✗ NRI socket exists without restart (unexpected)"
          else
            echo "✓ NRI socket not present (config not yet applied)"
          fi
          
          # Step 3: Manually restart containerd to apply config
          echo "=== Step 3: Manually restart containerd ==="
          sudo systemctl restart containerd
          # Wait for NRI socket to appear (containerd >= 1.7)
          for i in {1..30}; do
            if sudo test -S /var/run/nri/nri.sock; then
              echo "✓ NRI socket present after manual restart"
              break
            fi
            sleep 1
          done

          # Verify containerd is running
          if ! sudo systemctl is-active containerd; then
            echo "✗ Containerd failed to restart"
            exit 1
          fi
          echo "✓ Containerd restarted successfully"
          
          # Create NRI directory (containerd might not create it automatically)
          sudo mkdir -p /var/run/nri
          
          # Step 4: Run script again with restart to verify effectiveness
          echo "=== Step 4: Run script with restart to verify config is effective ==="
          
          # Configure host mount for nsenter
          sudo mkdir -p /host/proc
          sudo mount --bind /proc /host/proc
          
          export NRI_CONFIGURE=true
          export NRI_RESTART=true
          
          sudo -E bash charts/collector/scripts/nri-init.sh || true
          
          # Ensure NRI socket is present after script with restart
          for i in {1..30}; do
            if sudo test -S /var/run/nri/nri.sock; then
              echo "✓ NRI socket present after script with restart"
              break
            fi
            sleep 1
          done
          if ! sudo test -S /var/run/nri/nri.sock; then
            echo "✗ NRI socket not found after script with restart"
            sudo ls -la /var/run/nri || true
            sudo systemctl status containerd || true
            exit 1
          fi

          # Step 5: Verify final state
          echo "=== Step 5: Verify final state ==="
          
          # Check containerd is still running
          if sudo systemctl is-active containerd; then
            echo "✓ Containerd is running after configuration"
          else
            echo "✗ Containerd is not running"
            exit 1
          fi
          
          # Check NRI is in config
          if sudo grep -q 'disable = false' /etc/containerd/config.toml; then
            echo "✓ NRI is enabled in configuration"
          else
            echo "✗ NRI is not enabled in configuration"
            exit 1
          fi
          
          # Display final config for debugging
          echo "=== Final NRI configuration ==="
          sudo grep -A 7 'plugins."io.containerd.nri.v1.nri"' /etc/containerd/config.toml || echo "NRI config not found"

          # Final assert for NRI socket presence (retry briefly if missing)
          if sudo test -S /var/run/nri/nri.sock; then
            echo "✓ Configuration changes are effective after restart (socket present)"
          else
            echo "NRI socket missing on first check; waiting up to 10s..."
            for i in {1..10}; do
              if sudo test -S /var/run/nri/nri.sock; then
                echo "✓ NRI socket detected on retry"
                break
              fi
              sleep 1
            done
            if ! sudo test -S /var/run/nri/nri.sock; then
              echo "✗ NRI socket not found after restart"
              sudo ls -la /var/run/nri || true
              sudo systemctl status containerd || true
              exit 1
            fi
          fi
