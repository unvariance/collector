name: Rust NRI Init Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-image:
    name: Build and push nri-init test image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin
      - name: Build and push image
        id: meta
        env:
          IMAGE: ghcr.io/${{ github.repository_owner }}/nri-init-test:test-${{ github.run_id }}
        run: |
          docker build -f Dockerfile.nri-init-test -t "$IMAGE" .
          docker push "$IMAGE"
          echo "image=$IMAGE" >> "$GITHUB_OUTPUT"
  unit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build nri-init
        run: cargo build -p nri-init --locked --verbose
      - name: Run unit tests
        run: cargo test -p nri-init --lib --verbose

  # Safe integration tests (no system services), operate in temp dirs
  integration-sim:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build nri-init
        run: cargo build -p nri-init --locked --verbose
      - name: Run simulated integration tests
        run: cargo test -p nri-init --test integration_sim --verbose

  # Real environment tests (require self-hosted runner with systemd privileges)
  integration-real:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Build nri-init
        run: cargo build -p nri-init --release --verbose
      - name: K3s tests
        run: cargo test -p nri-init --test k3s -- --ignored --test-threads=1
      - name: Containerd tests
        run: cargo test -p nri-init --test containerd -- --ignored --test-threads=1

  # GH-hosted integration tests that set up KIND and K3s and run the nri-init binary
  integration-matrix:
    name: Rust NRI Integration (${{ matrix.target }} / ${{ matrix.scenario }})
    runs-on: ubuntu-latest
    needs: build-test-image
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: kind
            scenario: configure-only
            restart: false
          - target: kind
            scenario: configure-and-restart
            restart: true
          - target: k3s
            scenario: configure-only
            restart: false
          - target: k3s
            scenario: configure-and-restart
            restart: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build nri-init (release)
        run: cargo build -p nri-init --release --locked --verbose

      - name: Install kubectl
        if: ${{ matrix.target == 'kind' || matrix.target == 'k3s' }}
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client

      - name: Ensure Docker is running
        if: ${{ matrix.target == 'kind' }}
        run: |
          set -x
          (sudo systemctl start docker || sudo service docker start || true)
          docker info

      # KIND target setup
      - name: Install KIND
        if: ${{ matrix.target == 'kind' }}
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.24.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version

      - name: Create KIND cluster (no NRI)
        if: ${{ matrix.target == 'kind' }}
        env:
          CLUSTER: nri-rust-${{ matrix.scenario }}
        run: |
          # Expand ${CLUSTER} inside the config
          cat > kind-config.yaml << EOF
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          name: ${CLUSTER}
          nodes:
          - role: control-plane
            image: kindest/node:v1.31.0@sha256:53df588e04085fd41ae12de0c3fe4c72f7013bba32a20e7325357a1ac94ba865
          EOF
          kind create cluster --config kind-config.yaml --wait 300s
          kubectl cluster-info --context kind-${CLUSTER}
          kubectl get nodes

      - name: Create GHCR image pull secret in cluster
        if: ${{ matrix.target == 'kind' }}
        run: |
          kubectl delete secret ghcr-creds || true
          kubectl create secret docker-registry ghcr-creds \
            --docker-server=ghcr.io \
            --docker-username="${{ github.actor }}" \
            --docker-password="${{ secrets.GITHUB_TOKEN }}" \
            --docker-email="github-actions@users.noreply.github.com"

      - name: Run nri-init as privileged DaemonSet on KIND
        if: ${{ matrix.target == 'kind' }}
        env:
          TEST_IMAGE: ${{ needs.build-test-image.outputs.image }}
        run: |
          cat > ds.yaml << 'EOF'
          apiVersion: apps/v1
          kind: DaemonSet
          metadata:
            name: nri-init-test
            namespace: kube-system
            labels: { app: nri-init-test }
          spec:
            selector:
              matchLabels: { app: nri-init-test }
            template:
              metadata:
                labels: { app: nri-init-test }
              spec:
                hostPID: true
                imagePullSecrets:
                  - name: ghcr-creds
                tolerations:
                  - key: "node-role.kubernetes.io/control-plane"
                    operator: "Exists"
                    effect: "NoSchedule"
                containers:
                  - name: runner
                    image: ${TEST_IMAGE}
                    securityContext:
                      privileged: true
                    command: ["/usr/local/bin/nri-init"]
                    args: ["--log-level","debug","--configure","--nsenter-path","nsenter","--no-restart"]
                    volumeMounts:
                      - { name: host-root, mountPath: /host }
                      - { name: etc-containerd, mountPath: /etc/containerd }
                      - { name: run-nri, mountPath: /var/run/nri }
                volumes:
                  - name: host-root
                    hostPath: { path: /, type: Directory }
                  - name: etc-containerd
                    hostPath: { path: /etc/containerd, type: DirectoryOrCreate }
                  - name: run-nri
                    hostPath: { path: /var/run/nri, type: DirectoryOrCreate }
          EOF
          kubectl apply -f ds.yaml
          # Wait for pod ready
          kubectl -n kube-system rollout status ds/nri-init-test --timeout=120s
          POD=$(kubectl -n kube-system get pod -l app=nri-init-test -o jsonpath='{.items[0].metadata.name}')
          echo "=== nri-init logs ===" && kubectl -n kube-system logs "$POD" || true
          echo "=== Verify host containerd config patched ==="
          kubectl -n kube-system exec "$POD" -- sh -lc 'test -f /etc/containerd/config.toml && grep -q "plugins.\"io.containerd.nri.v1.nri\"" /etc/containerd/config.toml && grep -q "disable = false" /etc/containerd/config.toml'

      - name: Cleanup KIND
        if: ${{ always() && matrix.target == 'kind' }}
        env:
          CLUSTER: nri-rust-${{ matrix.scenario }}
        run: |
          kind delete cluster --name ${CLUSTER} || true

      # K3s target setup
      - name: Install K3s
        if: ${{ matrix.target == 'k3s' }}
        run: |
          # Install specific K3s version (1.31.x)
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="v1.31.12+k3s1" sudo sh -
          mkdir -p ~/.kube
          sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          sudo chown $(id -u):$(id -g) ~/.kube/config

      - name: Wait for K3s
        if: ${{ matrix.target == 'k3s' }}
        run: |
          export KUBECONFIG="$HOME/.kube/config"
          echo "Waiting for at least one node to appear..."
          for i in {1..120}; do
            COUNT=$(kubectl get nodes --no-headers 2>/dev/null | wc -l | tr -d ' ')
            if [ "${COUNT}" -ge 1 ]; then
              kubectl get nodes
              break
            fi
            sleep 5
          done
          echo "Waiting for nodes to be Ready..."
          kubectl wait --for=condition=Ready node --all --timeout=300s

      - name: Run nri-init on host (K3s)
        if: ${{ matrix.target == 'k3s' }}
        run: |
          echo "=== Run nri-init for K3s (configure=true restart=${{ matrix.restart }}) ==="
          set -x
          FAILED=0
          if ! sudo ./target/release/nri-init --log-level debug \
            --mode k3s \
            $( [ "${{ matrix.restart }}" = "true" ] && echo "--restart" || echo "--no-restart" ) \
            --configure \
            $( [ "${{ matrix.restart }}" = "true" ] && echo "--fail-if-unavailable" ); then
            echo "nri-init (k3s) failed; dumping k3s logs and template"
            sudo journalctl -u k3s --no-pager | tail -n 200 || true
            sudo ls -l /var/lib/rancher/k3s/agent/etc/containerd || true
            sudo sed -n '1,200p' /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl || true
            sudo sed -n '1,200p' /var/lib/rancher/k3s/agent/etc/containerd/config-v3.toml.tmpl || true
            FAILED=1
          fi

          echo "=== Verify K3s template patched ==="
          if [ -f "/var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl" ]; then
            if sudo grep -q 'plugins."io.containerd.nri.v1.nri"' /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl; then
              echo "✓ NRI section present in template"
            else
              echo "✗ NRI section missing from K3s template"
              sudo head -n 80 /var/lib/rancher/k3s/agent/etc/containerd/config.toml.tmpl || true
              exit 1
            fi
          fi

          if [ "${{ matrix.restart }}" = "false" ]; then
            echo "=== Verify socket absent when restart=false ==="
            if sudo test -S /var/run/nri/nri.sock; then
              echo "✗ Socket present but restart=false"
              exit 1
            else
              echo "✓ Socket absent as expected (no restart)"
            fi
          else
            echo "=== Verify socket after restart ==="
            for i in {1..30}; do
              if sudo test -S /var/run/nri/nri.sock; then
                sudo ls -la /var/run/nri/nri.sock
                echo "✓ NRI socket exists after restart"
                break
              fi
              sleep 1
            done
            if ! sudo test -S /var/run/nri/nri.sock; then
              echo "✗ NRI socket not found after restart on K3s"
              exit 1
            fi
          fi
          if [ "$FAILED" = "1" ]; then
            echo "nri-init returned failure earlier, but templates/socket checks passed; continuing"
          fi
