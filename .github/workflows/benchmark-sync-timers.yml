name: benchmark-sync-timers

on:
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      instance-type:
        description: 'EC2 instance type to use'
        required: false
        default: 'm7i.xlarge'
        type: string
      benchmark-duration:
        description: 'Duration for each benchmark test'
        required: false
        default: '10'
        type: choice
        options:
          - '1'
          - '10'
          - '100'
  push:
    branches:
      - main
    paths:
      - cmd/sync_timer_benchmark/**
      - pkg/sync_timer/**
      - .github/workflows/benchmark-ebpf.yml

permissions:
  id-token: write # Required for requesting the JWT
  actions: write # To cancel the workflow if getting the AWS instance fails

jobs:
  build-benchmark:
    name: Build benchmark binary
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache APT dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: build-essential golang-go llvm clang libbpf-dev git vim curl kmod unzip
          version: 1.0

      - name: Compute kernel headers package
        id: kernel
        run: |
          echo "headers=linux-headers-$(uname -r)" >> $GITHUB_OUTPUT

      - name: Cache kernel headers
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: ${{ steps.kernel.outputs.headers }}
          version: 1.0

      - name: Finalize kernel includes
        run: |
          # From cilium/ebpf instructions, to find asm/types.h
          sudo ln -sf /usr/include/asm-generic/ /usr/include/asm

      - name: Provide vmlinux.h for eBPF builds
        run: |
          set -euxo pipefail
          # Fetch pre-generated vmlinux.h headers (contains include/x86/vmlinux.h)
          git clone --depth 1 https://github.com/libbpf/vmlinux.h.git /tmp/vmlinux.h
          # Symlink vmlinux.h into any source directories that include it
          # This ensures clang finds it with default include search rules
          mapfile -t DIRS < <(grep -RIl --exclude-dir=target '#include \"vmlinux.h\"' || true)
          if [ ${#DIRS[@]} -gt 0 ]; then
            for d in $(printf '%s\n' "${DIRS[@]}" | xargs -r -n1 dirname | sort -u); do
              ln -sf /tmp/vmlinux.h/include/x86/vmlinux.h "$d/vmlinux.h"
            done
          fi

      - name: Build benchmark
        run: |
          cd cmd/sync_timer_benchmark
          go generate ../../...
          go build -o sync_timer_benchmark
          mkdir -p output
          mv sync_timer_benchmark output/
          cp benchmark_sync_timer.sh output/
          cp benchmark_sync_timer_stress.sh output/

      - name: Upload benchmark binary
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-binary
          path: cmd/sync_timer_benchmark/output/*

  setup-runner:
    name: Start EC2 runner
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.start-runner.outputs.runner-label }}
      ec2-instance-id: ${{ steps.start-runner.outputs.ec2-instance-id }}
      region: ${{ steps.start-runner.outputs.region }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Start AWS Runner
        id: start-runner
        uses: ./.github/actions/aws-runner
        with:
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          instance-type: ${{ inputs.instance-type || 'm7i.xlarge' }}
          image-type: 'ubuntu-22.04'

  cancel-on-failure:
    needs: setup-runner
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Cancel workflow
        uses: andymckay/cancel-action@a955d435292c0d409d104b57d8e78435a93a6ef1

  benchmark:
    needs: [build-benchmark, setup-runner]
    runs-on: ${{ needs.setup-runner.outputs.runner-label }}
    timeout-minutes: ${{ inputs.benchmark-duration == '1' && 5 || inputs.benchmark-duration == '10' && 7 || inputs.benchmark-duration == '100' && 20 || 7 }}
    steps:
      - name: Cache benchmark dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: stress-ng
          version: 1.0

      - name: Download benchmark binary
        uses: actions/download-artifact@v4
        with:
          name: benchmark-binary
          path: cmd/sync_timer_benchmark

      - name: Make benchmark executable
        run: |
          chmod +x cmd/sync_timer_benchmark/sync_timer_benchmark
          chmod +x cmd/sync_timer_benchmark/benchmark_sync_timer*.sh

      - name: Run benchmark
        run: |
          cd cmd/sync_timer_benchmark
          sudo ./benchmark_sync_timer_stress.sh -d ${{ inputs.benchmark-duration || '10' }} -o benchmark_results.csv

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: cmd/sync_timer_benchmark/benchmark_results.csv

  plot-benchmark:
    needs: [benchmark]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download benchmark results
        uses: actions/download-artifact@v4
        with:
          name: benchmark-results
          path: results

      - name: Visualize benchmark results
        uses: docker://rocker/tidyverse:latest
        with:
          entrypoint: sh
          args: -c "cd /github/workspace/ && mkdir -p plots && Rscript ./scripts/visualize_sync_timer_benchmark.R -i 'results/benchmark_results.csv' -p 'plots/benchmark_${{ inputs.benchmark-duration }}_${{ inputs.instance-type }}_'"

      - name: Upload benchmark plots
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-plots
          path: plots/*.pdf
          if-no-files-found: error

  cleanup-runner:
    name: Stop EC2 runner
    needs: [setup-runner, benchmark]
    runs-on: ubuntu-latest
    if: always()  # Run even if previous jobs fail
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Stop AWS Runner
        uses: ./.github/actions/aws-runner/cleanup
        with:
          runner-label: ${{ needs.setup-runner.outputs.runner-label }}
          ec2-instance-id: ${{ needs.setup-runner.outputs.ec2-instance-id }}
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.setup-runner.outputs.region || secrets.AWS_REGION }} 
