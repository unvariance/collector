name: tag-collector-latest
run-name: Tag collector as ${{ inputs.tag }} by @${{ github.actor }}

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to apply to the image'
        required: true
        default: 'latest'
      sha:
        description: 'Optional: Specific SHA to tag (must be on main branch)'
        required: false

jobs:
  tag-latest:
    name: Tag ${{ matrix.component }} as ${{ inputs.tag }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [collector, nri-init]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Check if branch is main
        run: |
          if [[ "${{ github.ref }}" != "refs/heads/main" && "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "This workflow must be run from the main branch"
            exit 1
          fi

      - name: Validate and get SHA
        id: get-sha
        run: |
          if [[ -n "${{ inputs.sha }}" ]]; then
            # Check if the specified SHA exists in the main branch
            if git merge-base --is-ancestor ${{ inputs.sha }} main; then
              echo "Using specified SHA: ${{ inputs.sha }}"
              FULL_SHA=$(git rev-parse ${{ inputs.sha }})
              echo "FULL_SHA=${FULL_SHA}" >> $GITHUB_OUTPUT
            else
              echo "Error: Specified SHA ${{ inputs.sha }} is not part of the main branch"
              exit 1
            fi
          else
            # Use the latest commit on main
            LATEST_SHA=$(git rev-parse HEAD)
            echo "Using latest main SHA: $LATEST_SHA"
            FULL_SHA=$LATEST_SHA
            echo "FULL_SHA=${FULL_SHA}" >> $GITHUB_OUTPUT
          fi
          
          # Generate short SHA
          SHORT_SHA=$(git rev-parse --short=7 ${FULL_SHA:-HEAD})
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT

          echo "FULL_SHA=${FULL_SHA}"
          echo "SHORT_SHA=${SHORT_SHA}"

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify source multi-arch manifest exists
        run: |
          SOURCE_TAG="main-${{ steps.get-sha.outputs.SHORT_SHA }}"
          SOURCE_IMAGE="ghcr.io/${{ github.repository }}/${{ matrix.component }}:${SOURCE_TAG}"
          
          echo "Verifying multi-arch manifest exists: ${SOURCE_IMAGE}"
          
          # Check if the manifest exists and is multi-arch
          if ! docker manifest inspect "${SOURCE_IMAGE}" > /dev/null 2>&1; then
            echo "Error: Source manifest ${SOURCE_IMAGE} does not exist"
            echo "Available tags:"
            docker run --rm quay.io/skopeo/skopeo list-tags docker://ghcr.io/${{ github.repository }}/${{ matrix.component }} | head -20
            exit 1
          fi
          
          # Verify it's multi-arch by checking for multiple manifests
          MANIFEST_COUNT=$(docker manifest inspect "${SOURCE_IMAGE}" | jq '.manifests | length')
          echo "Found ${MANIFEST_COUNT} architecture(s) in manifest"
          
          if [[ "${MANIFEST_COUNT}" -lt 2 ]]; then
            echo "Warning: Source manifest only contains ${MANIFEST_COUNT} architecture(s)"
            echo "Expected multi-architecture manifest with 2+ architectures"
          fi
          
          # Show the architectures
          echo "Architectures in manifest:"
          docker manifest inspect "${SOURCE_IMAGE}" | jq -r '.manifests[] | "\(.platform.architecture)/\(.platform.os)"'

      - name: Create new multi-arch tag using buildx imagetools
        run: |
          SOURCE_TAG="main-${{ steps.get-sha.outputs.SHORT_SHA }}"
          TARGET_TAG="${{ inputs.tag }}"
          SOURCE_IMAGE="ghcr.io/${{ github.repository }}/${{ matrix.component }}:${SOURCE_TAG}"
          TARGET_IMAGE="ghcr.io/${{ github.repository }}/${{ matrix.component }}:${TARGET_TAG}"
          
          echo "Creating multi-arch tag: ${SOURCE_IMAGE} -> ${TARGET_IMAGE}"
          
          # Use buildx imagetools to create a new tag that references the same multi-arch manifest
          # This preserves all architectures without needing to pull/push the actual image data
          docker buildx imagetools create --tag "${TARGET_IMAGE}" "${SOURCE_IMAGE}"
          
          echo "Successfully tagged ${TARGET_IMAGE}"

      - name: Verify new tag is multi-arch
        run: |
          TARGET_TAG="${{ inputs.tag }}"
          TARGET_IMAGE="ghcr.io/${{ github.repository }}/${{ matrix.component }}:${TARGET_TAG}"
          
          echo "Verifying new tag is multi-arch: ${TARGET_IMAGE}"
          
          # Check the new manifest
          MANIFEST_COUNT=$(docker manifest inspect "${TARGET_IMAGE}" | jq '.manifests | length')
          echo "New tag contains ${MANIFEST_COUNT} architecture(s)"
          
          # Show the architectures
          echo "Architectures in new tag:"
          docker manifest inspect "${TARGET_IMAGE}" | jq -r '.manifests[] | "\(.platform.architecture)/\(.platform.os)"'
          
          if [[ "${MANIFEST_COUNT}" -lt 2 ]]; then
            echo "Error: New tag only contains ${MANIFEST_COUNT} architecture(s)"
            exit 1
          fi
          
          echo "âœ… Successfully created multi-architecture tag: ${TARGET_TAG}" 
