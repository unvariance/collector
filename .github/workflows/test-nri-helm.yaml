name: Test NRI Helm Integration

on:
  push:
    branches: [ main ]
    paths:
      - 'charts/collector/**'
      - '.github/workflows/test-nri-helm.yaml'
  pull_request:
    paths:
      - 'charts/collector/**'
      - '.github/workflows/test-nri-helm.yaml'
  workflow_dispatch:

jobs:
  helm-lint:
    name: Helm Chart Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'
      
      - name: Lint Helm chart
        run: |
          helm lint charts/collector
      
      - name: Lint with NRI disabled values
        run: |
          helm lint charts/collector -f charts/collector/ci/nri-disabled-values.yaml
      
      - name: Lint with NRI configure-only values
        run: |
          helm lint charts/collector -f charts/collector/ci/nri-configure-only-values.yaml
      
      - name: Lint with NRI full setup values
        run: |
          helm lint charts/collector -f charts/collector/ci/nri-full-setup-values.yaml

  helm-template:
    name: Test Helm Template Rendering
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values:
          - name: "Default values"
            file: ""
            checks:
              - "name: nri-init"
              - "NRI_CONFIGURE.*true"
              - "NRI_RESTART.*false"
          - name: "NRI disabled"
            file: "charts/collector/ci/nri-disabled-values.yaml"
            checks:
              - "name: nri-init"
              - "NRI_CONFIGURE.*false"
              - "NRI_RESTART.*false"
          - name: "NRI configure only"
            file: "charts/collector/ci/nri-configure-only-values.yaml"
            checks:
              - "name: nri-init"
              - "NRI_CONFIGURE.*true"
              - "NRI_RESTART.*false"
          - name: "NRI full setup"
            file: "charts/collector/ci/nri-full-setup-values.yaml"
            checks:
              - "name: nri-init"
              - "NRI_CONFIGURE.*true"
              - "NRI_RESTART.*true"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: 'latest'
      
      - name: Template chart - ${{ matrix.values.name }}
        run: |
          if [ -z "${{ matrix.values.file }}" ]; then
            helm template test-release charts/collector > /tmp/rendered.yaml
          else
            helm template test-release charts/collector -f ${{ matrix.values.file }} > /tmp/rendered.yaml
          fi
          
          echo "=== Rendered template ==="
          cat /tmp/rendered.yaml
      
      - name: Verify expected content
        run: |
          for check in ${{ join(matrix.values.checks, ' ') }}; do
            if grep -q "$check" /tmp/rendered.yaml; then
              echo "✓ Found: $check"
            else
              echo "✗ Missing: $check"
              exit 1
            fi
          done
      
      - name: Verify ConfigMap exists
        run: |
          if grep -q "kind: ConfigMap" /tmp/rendered.yaml && grep -q "nri-init.sh" /tmp/rendered.yaml; then
            echo "✓ NRI init ConfigMap found"
          else
            echo "✗ NRI init ConfigMap missing"
            exit 1
          fi
      
      - name: Verify volume mounts
        run: |
          required_volumes="nri-init-script etc-containerd var-lib-rancher var-run"
          for vol in $required_volumes; do
            if grep -q "name: $vol" /tmp/rendered.yaml; then
              echo "✓ Volume $vol found"
            else
              echo "✗ Volume $vol missing"
              exit 1
            fi
          done

  test-helm-install:
    name: Test Helm Installation
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8s_version: ["1.27", "1.28", "1.29", "1.30", "1.31"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create kind cluster
        uses: helm/kind-action@v1
        with:
          node_image: kindest/node:v${{ matrix.k8s_version }}.0
          cluster_name: test-cluster
      
      - name: Install Helm chart with NRI disabled
        run: |
          helm install test-collector charts/collector \
            -f charts/collector/ci/nri-disabled-values.yaml \
            --wait --timeout 2m
      
      - name: Check pod status
        run: |
          kubectl get pods -l app.kubernetes.io/name=collector
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=collector --timeout=60s
      
      - name: Check init container logs
        run: |
          # Get pod name
          POD=$(kubectl get pod -l app.kubernetes.io/name=collector -o jsonpath='{.items[0].metadata.name}')
          
          echo "=== NRI Init Container Logs ==="
          kubectl logs $POD -c nri-init
          
          # Verify expected log messages
          if kubectl logs $POD -c nri-init | grep -q "NRI_CONFIGURE=false"; then
            echo "✓ NRI configure disabled as expected"
          else
            echo "✗ NRI configure not properly disabled"
            exit 1
          fi
      
      - name: Uninstall chart
        run: |
          helm uninstall test-collector
      
      - name: Install Helm chart with NRI configure-only
        run: |
          helm install test-collector charts/collector \
            -f charts/collector/ci/nri-configure-only-values.yaml \
            --wait --timeout 2m
      
      - name: Check configuration was attempted
        run: |
          # Wait for pod to exist
          echo "Waiting for collector pod to be created..."
          for i in {1..30}; do
            if kubectl get pod -l app.kubernetes.io/name=collector -o jsonpath='{.items[0].metadata.name}' 2>/dev/null; then
              break
            fi
            echo "Waiting for pod... ($i/30)"
            sleep 2
          done
          
          POD=$(kubectl get pod -l app.kubernetes.io/name=collector -o jsonpath='{.items[0].metadata.name}')
          
          # Wait for init container to complete
          echo "Waiting for init container to complete..."
          for i in {1..30}; do
            STATUS=$(kubectl get pod $POD -o jsonpath='{.status.initContainerStatuses[?(@.name=="nri-init")].state}' 2>/dev/null || echo "{}")
            if echo "$STATUS" | grep -q "terminated"; then
              echo "Init container completed"
              break
            fi
            echo "Waiting for init container... ($i/30)"
            sleep 2
          done
          
          echo "=== NRI Init Container Logs (Configure Only) ==="
          kubectl logs $POD -c nri-init
          
          # Verify configuration was attempted
          if kubectl logs $POD -c nri-init | grep -q "NRI_CONFIGURE=true"; then
            echo "✓ NRI configure enabled as expected"
          fi
          
          if kubectl logs $POD -c nri-init | grep -q "NRI_RESTART=false"; then
            echo "✓ NRI restart disabled as expected"
          fi

  security-scan:
    name: Security Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate init container runs as root (required for config changes)
        run: |
          if grep -q "privileged: true" charts/collector/values.yaml; then
            echo "✓ Init container configured with required privileges"
          else
            echo "✗ Init container missing required privileges"
            exit 1
          fi
      
      - name: Check for sensitive data exposure
        run: |
          # Ensure no credentials or sensitive data in scripts
          if grep -E "(password|secret|token|key)" charts/collector/scripts/nri-init.sh | grep -v "^#"; then
            echo "✗ Potential sensitive data found in script"
            exit 1
          else
            echo "✓ No sensitive data found in script"
          fi