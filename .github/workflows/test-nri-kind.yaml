name: Test NRI on KIND (standard containerd)

on:
  push:
    branches: [ main ]
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - 'charts/collector/templates/**'
      - '.github/workflows/test-nri-kind.yaml'
  pull_request:
    paths:
      - 'charts/collector/scripts/nri-init.sh'
      - 'charts/collector/templates/**'
      - '.github/workflows/test-nri-kind.yaml'
  workflow_dispatch:

jobs:
  test-nri-kind:
    name: Test NRI ${{ matrix.test_scenario }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - test_scenario: "configure-only"
            nri_configure: true
            nri_restart: false
            description: "Test configuration without restart"
          - test_scenario: "configure-and-restart"
            nri_configure: true
            nri_restart: true
            description: "Test configuration with restart"
          - test_scenario: "no-configure"
            nri_configure: false
            nri_restart: false
            description: "Test with NRI configuration disabled"
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Install KIND
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.24.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version
      
      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/kubectl
          kubectl version --client
      
      - name: Create KIND cluster WITHOUT NRI enabled
        run: |
          echo "=== Creating KIND cluster for: ${{ matrix.description }} ==="
          
          # Create KIND cluster config WITHOUT NRI (to test our init container)
          cat > kind-config.yaml << 'EOF'
          kind: Cluster
          apiVersion: kind.x-k8s.io/v1alpha4
          name: nri-test-${{ matrix.test_scenario }}
          nodes:
          - role: control-plane
            image: kindest/node:v1.31.0@sha256:53df588e04085fd41ae12de0c3fe4c72f7013bba32a20e7325357a1ac94ba865
            # Mount host directories for our init container to access
            extraMounts:
            - hostPath: /etc/containerd
              containerPath: /host-etc-containerd
            - hostPath: /var/run
              containerPath: /host-var-run
            - hostPath: /proc
              containerPath: /host-proc
              readOnly: true
          EOF
          
          # Create directories that will be mounted
          sudo mkdir -p /etc/containerd
          sudo mkdir -p /var/run
          
          kind create cluster --config kind-config.yaml --wait 300s
          
          kubectl cluster-info --context kind-nri-test-${{ matrix.test_scenario }}
          kubectl get nodes
      
      - name: Verify NRI is NOT enabled initially
        run: |
          echo "=== Checking initial NRI status ==="
          
          # Check containerd config in KIND node
          docker exec nri-test-${{ matrix.test_scenario }}-control-plane cat /etc/containerd/config.toml > initial-config.toml
          
          if grep -q 'plugins."io.containerd.nri.v1.nri"' initial-config.toml; then
            echo "✗ NRI already configured in KIND (unexpected)"
            cat initial-config.toml
            exit 1
          else
            echo "✓ NRI not configured initially (expected)"
          fi
          
          # Check for NRI socket - should NOT exist initially
          if docker exec nri-test-${{ matrix.test_scenario }}-control-plane ls -la /var/run/nri/ 2>/dev/null; then
            echo "✗ NRI socket directory exists when it shouldn't!"
            docker exec nri-test-${{ matrix.test_scenario }}-control-plane ls -la /var/run/nri/
            exit 1
          else
            echo "✓ NRI socket directory does not exist (expected)"
          fi
      
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      
      - name: Deploy collector with test scenario - ${{ matrix.test_scenario }}
        run: |
          echo "=== Deploying with: configure=${{ matrix.nri_configure }}, restart=${{ matrix.nri_restart }} ==="
          
          helm install test-collector ./charts/collector \
            --set storage.type=local \
            --set nri.configure=${{ matrix.nri_configure }} \
            --set nri.restart=${{ matrix.nri_restart }} \
            --wait --timeout=2m
      
      - name: Check NRI init container logs
        run: |
          # Wait for pod to exist first
          echo "=== Waiting for collector pod to be created ==="
          for i in {1..30}; do
            if kubectl get pod -l app.kubernetes.io/name=collector --no-headers 2>/dev/null | grep -q .; then
              echo "Pod created"
              break
            fi
            echo "Waiting for pod... ($i/30)"
            sleep 2
          done
          
          POD=$(kubectl get pod -l app.kubernetes.io/name=collector -o jsonpath='{.items[0].metadata.name}')
          
          # Wait for init container to complete
          echo "=== Waiting for init container to complete ==="
          kubectl wait --for=condition=Initialized pod/$POD --timeout=60s
          
          echo "=== NRI Init Container Logs ==="
          kubectl logs $POD -c nri-init
          
          # Store logs for analysis
          kubectl logs $POD -c nri-init > init-logs.txt
      
      - name: Verify expected behavior - ${{ matrix.test_scenario }}
        run: |
          echo "=== Verifying scenario: ${{ matrix.test_scenario }} ==="
          
          if [ "${{ matrix.test_scenario }}" = "no-configure" ]; then
            # Should detect NRI is missing but not configure it
            if grep -q "NRI configuration is disabled" init-logs.txt; then
              echo "✓ Correctly skipped configuration when disabled"
            else
              echo "✗ Should have skipped configuration"
              cat init-logs.txt
              exit 1
            fi
            
            # Verify config was NOT modified
            docker exec nri-test-${{ matrix.test_scenario }}-control-plane cat /etc/containerd/config.toml > final-config.toml
            if grep -q 'plugins."io.containerd.nri.v1.nri"' final-config.toml; then
              echo "✗ Config was modified when it shouldn't be"
              exit 1
            else
              echo "✓ Config was not modified (as expected)"
            fi
            
          elif [ "${{ matrix.test_scenario }}" = "configure-only" ]; then
            # Should configure but not restart
            if grep -q "Configuring NRI for standard containerd" init-logs.txt; then
              echo "✓ Configuration was attempted"
            else
              echo "✗ Configuration was not attempted"
              cat init-logs.txt
              exit 1
            fi
            
            if grep -q "configuration updated but containerd not restarted" init-logs.txt || \
               grep -q "NRI_RESTART=false" init-logs.txt; then
              echo "✓ Correctly skipped restart"
            else
              echo "✗ Unexpected restart behavior (restart should be disabled)"
              cat init-logs.txt
              exit 1
            fi
            
            # Verify config WAS modified
            docker exec nri-test-${{ matrix.test_scenario }}-control-plane cat /etc/containerd/config.toml > final-config.toml
            if grep -q 'plugins."io.containerd.nri.v1.nri"' final-config.toml; then
              echo "✓ NRI configuration added to containerd config"
              grep -A 7 'plugins."io.containerd.nri.v1.nri"' final-config.toml
            else
              echo "✗ NRI configuration not found in containerd config"
              exit 1
            fi

            # Ensure socket is NOT present since restart is disabled
            if docker exec nri-test-${{ matrix.test_scenario }}-control-plane ls -la /var/run/nri/nri.sock 2>/dev/null; then
              echo "✗ NRI socket present but restart was disabled"
              exit 1
            else
              echo "✓ NRI socket absent as expected (no restart)"
            fi
            
          elif [ "${{ matrix.test_scenario }}" = "configure-and-restart" ]; then
            # Should configure and attempt restart
            if grep -q "Configuring NRI for standard containerd" init-logs.txt; then
              echo "✓ Configuration was attempted"
            else
              echo "✗ Configuration was not attempted"
              cat init-logs.txt
              exit 1
            fi
            
            if grep -q "Restarting containerd\|Using nsenter" init-logs.txt; then
              echo "✓ Restart was attempted"
            else
              echo "✗ Restart was not attempted"
              cat init-logs.txt
              exit 1
            fi
            
            # Verify config WAS modified
            docker exec nri-test-${{ matrix.test_scenario }}-control-plane cat /etc/containerd/config.toml > final-config.toml
            if grep -q 'plugins."io.containerd.nri.v1.nri"' final-config.toml; then
              echo "✓ NRI configuration found in containerd config"
              if grep -A 5 'plugins."io.containerd.nri.v1.nri"' final-config.toml | grep -q "disable = false"; then
                echo "✓ NRI properly enabled (disable = false)"
              else
                echo "✗ NRI configuration present but not properly enabled"
                echo "Expected 'disable = false' in NRI configuration"
                exit 1
              fi
              grep -A 7 'plugins."io.containerd.nri.v1.nri"' final-config.toml
            else
              echo "✗ NRI configuration not found in containerd config"
              cat final-config.toml
              exit 1
            fi
            
            # Check if socket appeared after restart (allow some time)
            for i in {1..30}; do
              if docker exec nri-test-${{ matrix.test_scenario }}-control-plane test -S /var/run/nri/nri.sock; then
                docker exec nri-test-${{ matrix.test_scenario }}-control-plane ls -la /var/run/nri/nri.sock
                echo "✓ NRI socket exists after restart!"
                break
              fi
              sleep 1
            done
            if ! docker exec nri-test-${{ matrix.test_scenario }}-control-plane test -S /var/run/nri/nri.sock; then
              echo "✗ NRI socket not found after restart"
              echo "Expected NRI socket at /var/run/nri/nri.sock after configuration and restart"
              exit 1
            fi
          fi
      
      - name: Verify collector is running
        run: |
          echo "=== Waiting for collector pod to be ready ==="
          kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=collector --timeout=60s
          
          kubectl get pods -l app.kubernetes.io/name=collector
          
          if kubectl get pods -l app.kubernetes.io/name=collector --no-headers | grep -q "Running"; then
            echo "✓ Collector is running successfully"
          else
            echo "✗ Collector is not running"
            kubectl describe pods -l app.kubernetes.io/name=collector
            exit 1
          fi
      
      - name: Test idempotency
        if: matrix.test_scenario != 'no-configure'
        run: |
          echo "=== Testing idempotency for ${{ matrix.test_scenario }} ==="
          
          # Capture current config
          docker exec nri-test-${{ matrix.test_scenario }}-control-plane cat /etc/containerd/config.toml > config-before.toml
          
          # Redeploy
          helm uninstall test-collector
          kubectl wait --for=delete pod -l app.kubernetes.io/name=collector --timeout=30s || true
          
          helm install test-collector-2 ./charts/collector \
            --set storage.type=local \
            --set nri.configure=${{ matrix.nri_configure }} \
            --set nri.restart=false \
            --wait --timeout=2m
          
          # Wait for pod to be ready
          echo "Waiting for second deployment pod to be ready..."
          kubectl wait --for=condition=Ready pod -l app.kubernetes.io/name=collector --timeout=60s
          
          # Capture config after second run
          docker exec nri-test-${{ matrix.test_scenario }}-control-plane cat /etc/containerd/config.toml > config-after.toml
          
          # Compare configs
          if diff config-before.toml config-after.toml; then
            echo "✓ Configuration remains identical (idempotent)"
          else
            echo "✗ Configuration changed between runs"
            diff config-before.toml config-after.toml
            exit 1
          fi
          
          helm uninstall test-collector-2
      
      - name: Cleanup
        if: always()
        run: |
          helm uninstall test-collector || true
          helm uninstall test-collector-2 || true
          kind delete cluster --name nri-test-${{ matrix.test_scenario }} || true
