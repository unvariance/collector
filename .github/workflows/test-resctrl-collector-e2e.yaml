name: test-resctrl-collector-e2e

on:
  workflow_dispatch:
    inputs:
      instance-type:
        description: 'EC2 instance type to use'
        required: false
        default: 'm7i.metal-24xl'
        type: string
  pull_request:
    paths:
      - 'crates/collector/**'
      - 'crates/resctrl-collector/**'
      - 'charts/collector/**'
      - '.github/actions/setup-k3s/**'
      - '.github/workflows/test-resctrl-collector-e2e.yaml'
      - 'Cargo.toml'
  push:
    branches:
      - main
    paths:
      - 'crates/collector/**'
      - 'crates/resctrl-collector/**'
      - 'charts/collector/**'
      - '.github/actions/setup-k3s/**'
      - '.github/workflows/test-resctrl-collector-e2e.yaml'
      - 'Cargo.toml'

permissions:
  id-token: write
  contents: read
  actions: write
  packages: read

jobs:
  build-collector:
    name: Build collector image and binary
    uses: ./.github/workflows/build-component-artifacts.yaml
    with:
      runner: ubuntu-latest
      component: collector
      push: false
      upload-image-artifact: true
      upload-binary-artifact: false

  setup-runner:
    name: Start EC2 runner (resctrl-capable)
    needs: [build-collector]
    runs-on: ubuntu-latest
    outputs:
      runner-label: ${{ steps.start-runner.outputs.runner-label }}
      ec2-instance-id: ${{ steps.start-runner.outputs.ec2-instance-id }}
      region: ${{ steps.start-runner.outputs.region }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Start AWS Runner
        id: start-runner
        uses: ./.github/actions/aws-runner
        with:
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          iam-role-name: github-actions-runner
          instance-type: ${{ github.event.inputs.instance-type || 'm7i.metal-24xl' }}
          image-type: 'ubuntu-24.04'
          volume-size: '40'

  k3s-setup:
    name: Setup K3s + import image
    needs: [setup-runner, build-collector]
    runs-on: ${{ needs.setup-runner.outputs.runner-label }}
    env:
      KUBECONFIG: /etc/rancher/k3s/k3s.yaml
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup k3s
        uses: ./.github/actions/setup-k3s
        with:
          kubeconfig_path: /etc/rancher/k3s/k3s.yaml
          disable_packaged_addons: true
          preflight_inotify: true
          wait_kube_system: true
          timeout_api_server_ready_seconds: 300
          timeout_node_ready_seconds: 300
          timeout_kube_system_each_seconds: 10
          max_retries_kube_system_ready: 10

      - name: Download collector image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-collector.outputs.image_artifact }}
          path: ./

      - name: Import collector image into k3s containerd
        run: |
          set -euxo pipefail
          sudo k3s ctr -n k8s.io images import image.tar
          echo "Imported images in k3s namespace:"
          sudo k3s ctr -n k8s.io images ls | head -n 100 || true

      - name: Compute image repo and tag
        id: img
        shell: bash
        run: |
          image='${{ needs.build-collector.outputs.image }}'
          echo "Using image: $image"
          repo="${image%%:*}"
          tag="${image##*:}"
          echo "repo=$repo" >> "$GITHUB_OUTPUT"
          echo "tag=$tag" >> "$GITHUB_OUTPUT"

      - name: Install Helm
        run: |
          curl -sSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install jq and pqrs
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: jq unzip
          version: 1.0
      - name: Fetch pqrs
        run: |
          curl -L -o pqrs.zip https://github.com/manojkarthick/pqrs/releases/download/v0.3.2/pqrs-0.3.2-x86_64-unknown-linux-gnu.zip
          python3 -m zipfile -e pqrs.zip .
          sudo mv pqrs-0.3.2-x86_64-unknown-linux-gnu/bin/pqrs /usr/local/bin/
          sudo chmod +x /usr/local/bin/pqrs

      - name: Generate UUID prefix
        id: gen
        run: |
          UUID=$(python3 - << 'PY'
          import uuid
          print(uuid.uuid4())
          PY
          )
          echo "uuid=$UUID" >> "$GITHUB_OUTPUT"

      - name: Deploy CPU-active workload
        run: |
          kubectl create ns resctrl-e2e || true
          cat > /tmp/busybox.yaml << EOF
          apiVersion: v1
          kind: Pod
          metadata:
            name: stress-pod
            namespace: resctrl-e2e
          spec:
            restartPolicy: Never
            containers:
            - name: box
              image: busybox:1.36
              command: ["sh","-c","yes > /dev/null & yes > /dev/null & sleep 120"]
          EOF
          kubectl apply -f /tmp/busybox.yaml
          kubectl wait -n resctrl-e2e --for=condition=Ready pod/stress-pod --timeout=120s

      - name: Deploy collector Helm chart (resctrl + local)
        env:
          RELEASE_NAME: resctrl-collector
        run: |
          UUID='${{ steps.gen.outputs.uuid }}'
          PREFIX="/tmp/resctrl-occupancy-${UUID}-"
          echo "Using local prefix: $PREFIX"
          cat > values-resctrl.yaml << EOF
          image:
            repository: "${{ steps.img.outputs.repo }}"
            tag: "${{ steps.img.outputs.tag }}"
            pullPolicy: IfNotPresent
          collector:
            verbose: true
            duration: 30
          storage:
            type: "local"
            prefix: "$PREFIX"
          resctrl:
            enabled: true
            samplingInterval: "250ms"
            mountpoint: "/sys/fs/resctrl"
          nri:
            configure: true
            restart: false
            failIfUnavailable: false
          EOF
          helm upgrade --install "$RELEASE_NAME" ./charts/collector -f values-resctrl.yaml
          echo "Waiting for collector pod(s) to be Ready..."
          kubectl wait --for=condition=Ready pods -l app.kubernetes.io/name=collector --timeout=180s
          kubectl get pods -o wide

      - name: Wait for occupancy output
        id: waitocc
        run: |
          set -euo pipefail
          PREFIX="/tmp/resctrl-occupancy-${{ steps.gen.outputs.uuid }}-"
          echo "Waiting for files with prefix: ${PREFIX}"
          POD=$(kubectl get pods -l app.kubernetes.io/name=collector -o jsonpath='{.items[0].metadata.name}')
          echo "Using pod: $POD"
          for i in $(seq 1 60); do
            if kubectl exec "$POD" -- sh -lc "ls ${PREFIX}*.parquet 2>/dev/null | head -n1"; then
              echo "Found occupancy parquet file"
              break
            fi
            sleep 1
          done
          if ! kubectl exec "$POD" -- sh -lc "ls ${PREFIX}*.parquet 2>/dev/null | head -n1"; then
            echo "No occupancy files found in pod; dumping logs"
            kubectl logs "$POD" || true
            exit 1
          fi

      - name: Copy and verify parquet
        run: |
          set -euxo pipefail
          POD=$(kubectl get pods -l app.kubernetes.io/name=collector -o jsonpath='{.items[0].metadata.name}')
          FILE=$(kubectl exec "$POD" -- sh -lc "ls /tmp/resctrl-occupancy-*.parquet | head -n1")
          echo "Copying $FILE from $POD"
          kubectl cp "$POD":"$FILE" /tmp/occ.parquet
          echo "Schema:"
          pqrs schema /tmp/occ.parquet
          # Basic field checks
          for f in pod_namespace pod_name pod_uid resctrl_group llc_occupancy_bytes; do
            if ! pqrs schema /tmp/occ.parquet | grep -q "$f"; then
              echo "Missing expected field: $f"
              exit 1
            fi
          done
          # Ensure at least one row exists
          ROWS=$(pqrs count /tmp/occ.parquet | awk '{print $1}')
          echo "Rows: $ROWS"
          test "$ROWS" -ge 1

      - name: Cleanup Helm release
        if: always()
        run: |
          helm uninstall resctrl-collector --wait --timeout=60s || true

  stop-runner:
    name: Stop EC2 runner
    needs: [setup-runner, k3s-setup]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Stop AWS Runner
        uses: ./.github/actions/aws-runner/cleanup
        with:
          runner-label: ${{ needs.setup-runner.outputs.runner-label }}
          ec2-instance-id: ${{ needs.setup-runner.outputs.ec2-instance-id }}
          github-token: ${{ secrets.REPO_ADMIN_TOKEN }}
          aws-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ needs.setup-runner.outputs.region || secrets.AWS_REGION }}

