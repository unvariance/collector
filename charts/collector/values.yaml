# General configuration
nameOverride: ""
fullnameOverride: ""

# Image configuration
image:
  repository: "ghcr.io/unvariance/collector/collector"
  tag: "latest"
  pullPolicy: IfNotPresent

# Deployment configuration
deployment:
  # Mode: all or sample
  mode: "all"
  # When in sample mode, how many nodes to run on
  sampleSize: 5

# Node selection
nodeSelector: {}
tolerations: []
affinity: {}

# Security context and capabilities
securityContext:
  # Start with minimal privileges, avoid privileged: true
  privileged: false
  capabilities:
    add:
      - "BPF"     # Required for loading eBPF programs
      - "PERFMON" # Required for opening performance monitoring (cycle counter, cache misses, etc.)
      # SYS_ADMIN is required if kernel.perf_event_paranoid>2. see:
      #  - https://github.com/falcosecurity/charts/blob/master/charts/falco/values.yaml#L305 
      #  - https://grafana.com/docs/beyla/latest/setup/kubernetes/#deploy-beyla-unprivileged
      # To remove this, ensure kernel.perf_event_paranoid is set to 2 or below.
      - "SYS_ADMIN"
  runAsUser: 0      # Required for loading eBPF programs and writing to `kernel.timer_migration`
  # Optional: configure AppArmor via container securityContext
  # If empty, defaults to Unconfined when resctrl.enabled=true
  appArmorProfile: {}

# Collector configuration
collector:
  # Verbose debug output
  verbose: false
  # Track duration in seconds (0 = unlimited)
  duration: 0
  # Port for HTTP health server (/live, /ready)
  healthPort: 8080
  # Enable trace mode to output raw telemetry events instead of 1ms aggregated data
  # This provides nanosecond-granular context switch and timer events for detailed analysis
  trace: false
  # Maximum memory buffer size before flushing (bytes)
  parquetBufferSize: "104857600"  # 100MB
  # Maximum size for each Parquet file before rotation (bytes)
  parquetFileSize: "1073741824"  # 1GB
  # Maximum row group size (number of rows) in a Parquet Row Group
  maxRowGroupSize: "1048576"
  # Maximum total bytes to write to object store (optional)
  storageQuota: null

# Resctrl collector (experimental feature; disabled by default)
resctrl:
  enabled: false
  # Sampling interval for LLC occupancy measurements
  samplingInterval: "1s"
  # Path where resctrl is mounted on the host
  mountpoint: "/sys/fs/resctrl"
  # Distinct object/file prefix for resctrl parquet outputs
  prefix: "resctrl-occupancy-"
  # Optionally mount resctrl on the host before the collector starts.
  # This requires privileged access and bidirectional mount propagation.
  # If disabled, the collector expects /sys/fs/resctrl to already be mounted on the node.
  autoMountHost: false
  init:
    image:
      repository: busybox
      tag: "1.36"
      pullPolicy: IfNotPresent
    securityContext:
      privileged: true
      allowPrivilegeEscalation: true
      runAsUser: 0

# Storage configuration
storage:
  type: "s3"  # Options: "local", "s3"
  prefix: "memory-collector-metrics-"
  
  # S3-specific configuration
  s3:
    bucket: ""
    region: ""
    endpoint: ""  # For non-AWS S3-compatible storage
    pathStyle: false  # If true, use path-style addressing instead of virtual-hosted style
    
    # Authentication methods
    auth:
      method: "iam"  # Options: "iam", "secret", "existing"
      # For "secret" method
      accessKey: ""
      secretKey: ""
      # For "existing" method
      existingSecret: ""  # Reference existing secret
      existingSecretKeyMapping:
        accessKey: "access_key_id"
        secretKey: "secret_access_key"

# Service account configuration
serviceAccount:
  create: true
  annotations: {}
  name: ""

# Resource limits
resources:
  limits:
    cpu: 1000m
    memory: 350Mi
  requests:
    cpu: 100m
    memory: 250Mi

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# POD Security context - allow running on SELinux enabled systems (e.g. RHEL, Fedora etc.)
podSecurityContext:
  seLinuxOptions:
    level: s0
    type: spc_t  # Running as SuperPrivilegedContainer - see container securityContext for reduction of kernel capabilities

# Additional environment variables
extraEnv: []

# NRI (Node Resource Interface) configuration
# NRI enables the collector to access pod and container metadata
nri:
  # Whether to configure NRI when socket is missing
  configure: false
  # Whether to restart containerd after configuration (requires maintenance window)
  restart: false
  # Whether to fail if NRI is unavailable (useful for testing)
  failIfUnavailable: false
  # Init container image
  init:
    image:
      repository: ghcr.io/unvariance/collector/nri-init
      tag: latest
      pullPolicy: IfNotPresent
    command: ["/bin/nri-init"]
    securityContext:
      privileged: true
    resources:
      limits:
        cpu: 200m
        memory: 128Mi
  # No script-based init container supported anymore
