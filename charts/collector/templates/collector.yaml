{{- $mode := .Values.deployment.mode -}}
apiVersion: apps/v1
kind: {{ if eq $mode "all" }}DaemonSet{{ else }}Deployment{{ end }}
metadata:
  name: {{ include "collector.fullname" . }}
  labels:
    {{- include "collector.labels" . | nindent 4 }}
spec:
  {{- if ne $mode "all" }}
  replicas: {{ .Values.deployment.sampleSize }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "collector.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "collector.selectorLabels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.nri.restart }}
      hostPID: true
      {{- end }}
      {{- if ne $mode "all" }}
      # Use pod anti-affinity to ensure no more than one collector per node
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - {{ include "collector.name" . }}
                  - key: app.kubernetes.io/instance
                    operator: In
                    values:
                      - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
        {{- with .Values.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- else }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      serviceAccountName: {{ include "collector.serviceAccountName" . }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: nri-init
          image: "{{ .Values.nri.init.image.repository }}:{{ .Values.nri.init.image.tag }}"
          imagePullPolicy: {{ .Values.nri.init.image.pullPolicy | default "IfNotPresent" }}
          securityContext:
            {{- toYaml .Values.nri.init.securityContext | nindent 12 }}
          command: {{ toYaml .Values.nri.init.command | nindent 12 }}
          env:
            - name: NRI_CONFIGURE
              value: "{{ .Values.nri.configure }}"
            - name: NRI_RESTART
              value: "{{ .Values.nri.restart }}"
            - name: NRI_FAIL_IF_UNAVAILABLE
              value: "{{ .Values.nri.failIfUnavailable | default false }}"
          resources:
            {{- toYaml .Values.nri.init.resources | nindent 12 }}
          volumeMounts:
            - name: etc-containerd
              mountPath: /etc/containerd
            - name: var-lib-rancher
              mountPath: /var/lib/rancher
            - name: var-run
              mountPath: /var/run/nri
            - name: host-proc
              mountPath: /host/proc
              readOnly: true
        {{- if and .Values.resctrl.enabled .Values.resctrl.autoMountHost }}
        - name: resctrl-mount
          image: "{{ .Values.resctrl.init.image.repository }}:{{ .Values.resctrl.init.image.tag }}"
          imagePullPolicy: {{ .Values.resctrl.init.image.pullPolicy | default "IfNotPresent" }}
          securityContext:
            {{- toYaml .Values.resctrl.init.securityContext | nindent 12 }}
          command:
            - /bin/sh
            - -c
            - |
              set -eu
              MP="/host/sys/fs/resctrl"
              mkdir -p "$MP"
              if grep -E "[[:space:]]/sys/fs/resctrl[[:space:]]+resctrl[[:space:]]" /host/proc/mounts >/dev/null 2>&1; then
                echo "resctrl already mounted on host"
                exit 0
              fi
              echo "Mounting resctrl on host at $MP"
              mount -t resctrl resctrl "$MP"
          volumeMounts:
            - name: sys-fs-root
              mountPath: /host/sys/fs
              mountPropagation: Bidirectional
            - name: host-proc
              mountPath: /host/proc
              readOnly: true
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          args:
            {{- if .Values.collector.verbose }}
            - --verbose
            {{- end }}
            {{- if .Values.collector.duration }}
            - --duration={{ .Values.collector.duration }}
            {{- end }}
            {{- if .Values.collector.trace }}
            - --trace
            {{- end }}
            - --health-addr=0.0.0.0:{{ .Values.collector.healthPort }}
            - --storage-type={{ .Values.storage.type }}
            - --prefix={{ .Values.storage.prefix }}
            - --parquet-buffer-size={{ .Values.collector.parquetBufferSize }}
            - --parquet-file-size={{ .Values.collector.parquetFileSize }}
            - --max-row-group-size={{ .Values.collector.maxRowGroupSize }}
            {{- if .Values.collector.storageQuota }}
            - --storage-quota={{ .Values.collector.storageQuota }}
            {{- end }}
            {{- if .Values.resctrl.enabled }}
            - --enable-resctrl
            - --resctrl-prefix={{ .Values.resctrl.prefix }}
            {{- end }}
          env:
            {{- if eq .Values.storage.type "s3" }}
            {{- include "collector.s3EnvVars" . | nindent 12 }}
            {{- end }}
            {{- if .Values.collector.verbose }}
            - name: RUST_LOG
              value: "debug"
            {{- end }}
            {{- if .Values.resctrl.enabled }}
            - name: RESCTRL_SAMPLING_INTERVAL
              value: "{{ .Values.resctrl.samplingInterval }}"
            - name: RESCTRL_MOUNT
              value: "{{ .Values.resctrl.mountpoint }}"
            {{- end }}
            {{- with .Values.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          ports:
            - name: http-health
              containerPort: {{ .Values.collector.healthPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /live
              port: http-health
            initialDelaySeconds: 3
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /ready
              port: http-health
            initialDelaySeconds: 3
            periodSeconds: 5
          volumeMounts:
            {{- if eq .Values.storage.type "local" }}
            - name: data-volume
              mountPath: /data
            {{- end }}
            - name: var-run
              mountPath: /var/run/nri
            - name: sys-kernel-debug
              mountPath: /sys/kernel/debug
            - name: sys-kernel-tracing
              mountPath: /sys/kernel/tracing
            - name: sys-fs-bpf
              mountPath: /sys/fs/bpf
            - name: tracefs
              mountPath: /sys/kernel/debug/tracing
            - name: cgroup
              mountPath: /sys/fs/cgroup
            {{- if .Values.resctrl.enabled }}
            - name: resctrl
              mountPath: {{ .Values.resctrl.mountpoint }}
              readOnly: false
              {{- if .Values.resctrl.autoMountHost }}
              # Allow mount events from this container to propagate back to the host
              mountPropagation: Bidirectional
              {{- end }}
            {{- end }}
      volumes:
        {{- if eq .Values.storage.type "local" }}
        - name: data-volume
          emptyDir: {}
        {{- end }}
        - name: etc-containerd
          hostPath:
            path: /etc/containerd
            type: DirectoryOrCreate
        - name: var-lib-rancher
          hostPath:
            path: /var/lib/rancher
            type: DirectoryOrCreate
        - name: var-run
          hostPath:
            path: /var/run/nri
            type: DirectoryOrCreate
        - name: host-proc
          hostPath:
            path: /proc
            type: Directory
        - name: sys-kernel-debug
          hostPath:
            path: /sys/kernel/debug
        - name: sys-kernel-tracing
          hostPath:
            path: /sys/kernel/tracing
        - name: sys-fs-bpf
          hostPath:
            path: /sys/fs/bpf
        - name: tracefs
          hostPath:
            path: /sys/kernel/debug/tracing
        - name: cgroup
          hostPath:
            path: /sys/fs/cgroup 
            type: Directory
        - name: sys-fs-root
          hostPath:
            path: /sys/fs
            type: Directory
        {{- if .Values.resctrl.enabled }}
        - name: resctrl
          hostPath:
            path: {{ .Values.resctrl.mountpoint }}
            # Create the directory on the host if missing; may be a plain dir until mounted
            type: DirectoryOrCreate
        {{- end }}
